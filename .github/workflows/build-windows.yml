name: Build goclip (Windows)

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"
          cache: true

      - name: Install MSYS2 (MinGW-w64) for CGO
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MINGW64
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-pkg-config

      - name: Add MinGW to PATH
        shell: pwsh
        run: echo "C:\msys64\mingw64\bin" >> $Env:GITHUB_PATH

      - name: Set build environment
        shell: pwsh
        run: |
          echo "CGO_ENABLED=1" >> $Env:GITHUB_ENV
          echo "GOOS=windows" >> $Env:GITHUB_ENV
          echo "GOARCH=amd64" >> $Env:GITHUB_ENV
          echo "CC=x86_64-w64-mingw32-gcc" >> $Env:GITHUB_ENV
          if ("${{ github.ref_type }}" -eq "tag") {
            $v = "${{ github.ref_name }}"
          } else {
            $sha = "${{ github.sha }}".Substring(0,7)
            $v = "dev-$sha"
          }
          echo "APP_VERSION=$v" >> $Env:GITHUB_ENV

      - name: Go mod download
        run: go mod download

      - name: Install goversioninfo (for embedding icon)
        shell: pwsh
        run: |
          go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo@latest

      - name: Generate Windows resources (icon -> resource.syso)
        shell: pwsh
        run: |
          $goversioninfo = Join-Path (go env GOPATH) 'bin\goversioninfo.exe'
          if (-not (Test-Path $goversioninfo)) {
            throw "goversioninfo not found at $goversioninfo"
          }
          # Creates resource.syso in the repo root. Go picks this up automatically on windows build.
          & $goversioninfo -icon=assets\logo\app.ico -64 -platform-specific

      - name: Build goclip.exe (GUI, stripped)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          go build -trimpath -ldflags="-H=windowsgui -s -w" -o dist/goclip-windows-amd64.exe .

      - name: Package zip
        shell: pwsh
        run: |
          Compress-Archive -Path dist/goclip-windows-amd64.exe -DestinationPath dist/goclip-${Env:APP_VERSION}-windows-amd64.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: goclip-${{ env.APP_VERSION }}-windows-amd64
          path: |
            dist/goclip-windows-amd64.exe
            dist/goclip-${{ env.APP_VERSION }}-windows-amd64.zip
          if-no-files-found: error

      - name: Publish GitHub Release (tagged)
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            dist/goclip-windows-amd64.exe
            dist/goclip-${{ env.APP_VERSION }}-windows-amd64.zip
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          allowUpdates: true
          replacesArtifacts: true
          generateReleaseNotes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
